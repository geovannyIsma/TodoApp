version: '3.8'

services:
  db_ms1:
    image: postgres:15
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    env_file:
      - ./.env
    environment:
      - POSTGRES_PASSWORD=${DATABASE_PASSWORD}
      - POSTGRES_USER=${DATABASE_USER}
      - POSTGRES_DB=${DATABASE_NAME}
    ports:
      - "5432:5432"
    deploy:
      replicas: 1  # Database typically uses built-in replication rather than container replication
      placement:
        constraints:
          - node.role == manager  # Place database on manager nodes for persistence
      restart_policy:
        condition: on-failure
        max_attempts: 3
        window: 120s
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  backend_ms1_tasks:
    image: ${REGISTRY:-localhost}/todoapp_backend_ms1_tasks:${TAG:-latest}
    build:
      context: ..
      dockerfile: Docker/backend-MS1/Dockerfile
    command: >
      sh -c "cd Backend-MS1/todo &&
             python manage.py migrate &&
             gunicorn todo.wsgi:application --bind 0.0.0.0:8000"
    volumes:
      - ..:/app
    ports:
      - "8000:8000"
    deploy:
      replicas: 2
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first
      restart_policy:
        condition: on-failure
        max_attempts: 3
      resources:
        limits:
          cpus: '0.50'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    env_file:
      - ./.env
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  frontend_todoapp:
    image: ${REGISTRY:-localhost}/todoapp_frontend:${TAG:-latest}
    build:
      context: ..
      dockerfile: Docker/frontend/Dockerfile
    ports:
      - "80:80"
    deploy:
      replicas: 3
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first
      restart_policy:
        condition: any
      resources:
        limits:
          cpus: '0.30'
          memory: 256M
        reservations:
          cpus: '0.10'
          memory: 128M
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:80/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

  db_ms2:
    image: mysql:8.0
    volumes:
      - mysql_data:/var/lib/mysql
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_DATABASE=${MYSQL_DB}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
    ports:
      - "3306:3306"
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        condition: on-failure
        max_attempts: 3
        window: 120s
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u${MYSQL_USER}", "-p${MYSQL_PASSWORD}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  backend_ms2_users:
    image: ${REGISTRY:-localhost}/todoapp_backend_ms2_users:${TAG:-latest}
    build:
      context: ..
      dockerfile: Docker/backend-MS2/Dockerfile
    volumes:
      - ../Backend-MS2:/app
    ports:
      - "8001:8001"
    deploy:
      replicas: 2
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first
      restart_policy:
        condition: on-failure
      resources:
        limits:
          cpus: '0.50'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    env_file:
      - ./.env
    environment:
      - MYSQL_HOST=db_ms2
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_DB=${MYSQL_DB}
      - MYSQL_PORT=3306
      - SECRET_KEY=${MS2_SECRET_KEY}
      - ACCESS_TOKEN_EXPIRE_MINUTES=60
    command: >
      sh -c "uvicorn app.main:app --host 0.0.0.0 --port 8001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  db_ms3:
    image: mysql:8.0
    volumes:
      - mysql_data_ms3:/var/lib/mysql
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_DATABASE=${MYSQL_DB_MS3}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
    ports:
      - "3307:3306"
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        condition: on-failure
        max_attempts: 3
        window: 120s
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u${MYSQL_USER}", "-p${MYSQL_PASSWORD}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  backend_ms3_notifications:
    image: ${REGISTRY:-localhost}/todoapp_backend_ms3_notifications:${TAG:-latest}
    build:
      context: ..
      dockerfile: Docker/backend-MS3/Dockerfile
    volumes:
      - ../Backend-MS3:/app
    ports:
      - "8002:8002"
    deploy:
      replicas: 1
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first
      restart_policy:
        condition: on-failure
      resources:
        limits:
          cpus: '0.30'
          memory: 256M
        reservations:
          cpus: '0.10'
          memory: 128M
    env_file:
      - ./.env
    environment:
      - MYSQL_HOST=db_ms3
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_DB=${MYSQL_DB_MS3}
      - MYSQL_PORT=3306
      - SECRET_KEY=${MS2_SECRET_KEY}
      - AUTH_SERVICE_URL=http://backend_ms2_users:8001
      - TASKS_SERVICE_URL=http://backend_ms1_tasks:8000
    command: >
      sh -c "uvicorn app.main:app --host 0.0.0.0 --port 8002"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

volumes:
  postgres_data:
    driver: local
  mysql_data:
    driver: local
  mysql_data_ms3:
    driver: local

networks:
  default:
    driver: overlay
